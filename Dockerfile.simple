# 简化版 Dockerfile - 专注核心功能
FROM wxingheng/node-chrome-base:latest

# 基础环境配置
ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1
ENV NODE_OPTIONS="--max-old-space-size=4096"
# 强制使用官方npm源
ENV NPM_CONFIG_REGISTRY=https://registry.npmjs.org/
ENV YARN_REGISTRY=https://registry.npmjs.org/

# 设置工作目录
WORKDIR /app

# 复制依赖文件
COPY package.json yarn.lock ./

# 强力修复：清除配置文件，重置配置，立即安装依赖（在同一RUN命令中）
RUN yarn --version && \
    echo "=== 清除前检查 ===" && \
    ls -la /root/.npmrc /usr/local/share/.yarnrc 2>/dev/null || echo "No config files" && \
    echo "=== 开始清除配置文件 ===" && \
    rm -f /root/.npmrc /usr/local/share/.yarnrc /usr/local/etc/npmrc /usr/local/etc/yarnrc && \
    rm -f /app/.npmrc /app/.yarnrc && \
    echo "=== 重置npm和yarn配置 ===" && \
    npm config set registry https://registry.npmjs.org/ && \
    yarn config set registry https://registry.npmjs.org/ && \
    echo "=== 验证配置 ===" && \
    npm config get registry && \
    yarn config get registry && \
    yarn config list | grep registry && \
    echo "=== 开始安装依赖（包括开发依赖）===" && \
    yarn install --frozen-lockfile --production=false --registry https://registry.npmjs.org/ --verbose && \
    echo "=== 验证 patch-package 可用性 ===" && \
    (yarn list patch-package || echo "patch-package not found, installing globally...") && \
    (command -v patch-package >/dev/null || yarn global add patch-package@8.0.0 --registry https://registry.npmjs.org/) && \
    echo "patch-package version: $(yarn patch-package --version 2>/dev/null || echo 'using global')"

# 复制源代码
COPY . .

# 构建应用
RUN yarn build

# 清理开发依赖
RUN yarn install --production --frozen-lockfile --registry https://registry.npmjs.org/ --verbose && \
    yarn cache clean --verbose

EXPOSE 3000

# 启动应用
CMD ["yarn", "start"]
